"use strict";
// Management for the current environment.
Object.defineProperty(exports, "__esModule", { value: true });
exports.appCenterEndpointEnvVar = "APPCENTER_ENDPOINT";
exports.appCenterLoginEndpointEnvVar = "APPCENTER_LOGIN_ENDPOINT";
exports.appCenterPortalEndpointEnvVar = "APPCENTER_PORTAL_ENDPOINT";
// Default environment data
const environmentsData = {
    defaultEnvironment: "prod",
    environments: {
        dev: {
            endpoint: "https://bifrost-dev.trafficmanager.net",
            loginEndpoint: "https://asgard-dev.trafficmanager.net/cli-login",
            portalEndpoint: "https://asgard-dev.trafficmanager.net",
            description: "Development"
        },
        int: {
            endpoint: "https://bifrost-int.trafficmanager.net",
            loginEndpoint: "https://portal-server-core-integration.dev.avalanch.es/cli-login",
            portalEndpoint: "https://portal-server-core-integration.dev.avalanch.es",
            description: "Integration"
        },
        staging: {
            endpoint: "https://bifrost-staging.trafficmanager.net",
            loginEndpoint: "https://asgard-staging.trafficmanager.net/cli-login",
            portalEndpoint: "https://asgard-staging.trafficmanager.net",
            description: "Staging"
        },
        prod: {
            endpoint: "https://api.appcenter.ms",
            loginEndpoint: "https://appcenter.ms/cli-login",
            portalEndpoint: "https://appcenter.ms",
            description: "Production"
        },
        local: {
            /* tslint:disable:no-http-string */
            endpoint: process.env[exports.appCenterEndpointEnvVar] || "http://localhost:1700",
            loginEndpoint: process.env[exports.appCenterLoginEndpointEnvVar] || null,
            portalEndpoint: process.env[exports.appCenterPortalEndpointEnvVar] || "http://localhost:8080",
            description: "Local Development"
            /* tslint:enable:no-http-string */
        }
    }
};
function environments(environmentName = environmentsData.defaultEnvironment) {
    return environmentsData.environments[environmentName];
}
exports.environments = environments;
function allEnvironments() {
    return environmentsData;
}
exports.allEnvironments = allEnvironments;
function defaultEnvironmentName() {
    return environmentsData.defaultEnvironment;
}
exports.defaultEnvironmentName = defaultEnvironmentName;
function getPortalUrlForEndpoint(endpoint) {
    for (const environmentName of Object.keys(environmentsData.environments)) {
        const environment = environmentsData.environments[environmentName];
        if (environment.endpoint === endpoint) {
            return environment.portalEndpoint;
        }
    }
    throw new Error(`Unknown API endpoint - ${endpoint}`);
}
exports.getPortalUrlForEndpoint = getPortalUrlForEndpoint;
